{"version":3,"sources":["../node_modules/hdkey/lib/hdkey.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/bs58/index.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-6712b90d.js"],"names":["assert","require","Buffer","crypto","bs58check","secp256k1","MASTER_SECRET","from","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","buffer","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","createHash","update","digest","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","concat","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","signature","verify","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","readUInt8","fromJSON","obj","HARDENED_OFFSET","module","exports","bs58checkBase","tmp","base58","checksumFn","decodeRaw","payload","checksum","newChecksum","string","Error","decodeUnsafe","basex","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","hdk","addresses","dkey","address","toString","push","dPath","isValidPath","parts","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit"],"mappings":"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","file":"static/js/11.40e6cb9c.chunk.js","sourcesContent":["var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = secp256k1.publicKeyCreate(value, true)\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = secp256k1.publicKeyConvert(value, true) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL)\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true)\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return secp256k1.sign(hash, this.privateKey).signature\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.verify(hash, signature, this.publicKey)\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(address)\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"],"sourceRoot":""}